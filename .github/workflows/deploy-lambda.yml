name: Deploy Lambda with S3 Bucket

on:
  push:
    branches:
      - main

jobs:
  deploy:
    runs-on: ubuntu-latest

    steps:
      # 1. Checkout do código
      - name: Checkout code
        uses: actions/checkout@v3

      # 2. Configurar AWS CLI
      - name: Configure AWS CLI
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}

      # 3. Instalar dependências na pasta package
      - name: Install dependencies
        run: |
          mkdir package
          pip install -r app/requirements.txt -t package/

      # 4. Copiar o código-fonte para a pasta package
      - name: Copy source code
        run: |
          cp -r app/* package/

      # 5. Empacotar o código e dependências
      - name: Package Lambda
        run: |
          cd package
          zip -r ../lambda_function.zip .
          cd ..

      # 6. Criar o bucket S3 (se ainda não existir)
      - name: Create S3 Bucket
        run: |
          aws s3api create-bucket --bucket fit-strike-bucket --region ${{ secrets.AWS_REGION }}

      # 7. Fazer upload do código para o bucket S3
      - name: Upload Lambda Code to S3
        run: |
          aws s3 cp lambda_function.zip s3://fit-strike-bucket/lambda_function.zip

      # 8. Configurar Terraform
      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v2
        with:
          terraform_version: 1.5.0

      # 9. Inicializar Terraform
      - name: Initialize Terraform
        run: |
          cd infra
          terraform init

      # 10. Planejar Terraform
      - name: Plan Terraform
        run: |
          cd infra
          terraform plan -var "source_code_hash=$(sha256sum lambda_function.zip | awk '{print $1}')"

      # 11. Aplicar Terraform
      - name: Apply Terraform
        run: |
          cd infra
          terraform apply -var "source_code_hash=$(sha256sum lambda_function.zip | awk '{print $1}')" -auto-approve
          
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}